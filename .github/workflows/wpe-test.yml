# Workflow Name
name: Tests

# Events that trigger this workflow
on:
  push:
    branches:
      - master
      - main
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:

# Set default shell for all `run` commands
defaults:
  run:
    shell: bash

# Define environment variables to avoid duplication
env:
  PHP_VERSION: '8.2'  # PHP version to use across jobs
  CACHE_PATHS: |      # Paths to cache composer dependencies
    vendor/
    wp-admin/
    wp-includes/
    wp-content/plugins/
    wp-content/themes/
    index.php
    wp-activate.php
    wp-blog-header.php
    wp-comments-post.php
    wp-config-sample.php
    wp-cron.php
    wp-links-opml.php
    wp-load.php
    wp-login.php
    wp-mail.php
    wp-settings.php
    wp-signup.php
    wp-trackback.php
    xmlrpc.php
  # GITHUB_OAUTH_COMMAND: 'composer config --global github-oauth.github.com ${{ secrets.GH_TOKEN }}' # OAuth configuration command for Composer

# Job to cache Composer dependencies
jobs:
  setup:
    name: Cache Composer Dependencies
    runs-on: ubuntu-20.04
    outputs:
      cache-hit: ${{ steps.cache-hit.outputs.cache-hit }}  # Output for cache status
      cache-key: ${{ steps.cache-key.outputs.key }}        # Output for cache key

    steps:
      # Step to check out the code repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step to prepare the workspace by removing unnecessary files
      - name: Prepare workspace for caching composer dependencies
        run: |
          rm -rf *
          rm -r .github
          rm .deployignore .gitignore
          git checkout composer.json
          git checkout composer.lock
          rm -r .git
          ls -a

      # Set up PHP and Composer environment
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:v2

      # Generate a unique cache key based on the `composer.lock` file
      - name: Generate cache key from composer.lock
        id: cache-key
        run: echo "key=$(echo ${{ runner.os }}-composer-$(sha256sum composer.lock | awk '{ print $1 }'))" >> $GITHUB_OUTPUT
  
      # Look up cache based on the generated key
      - name: Lookup Composer cache
        id: cache-hit
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-composer
          lookup-only: true

      # Output whether cache was hit
      - name: Debug cache hit
        run: echo "Cache hit was ${{ steps.cache-hit.outputs.cache-hit }}"

      # Install dependencies if cache is missing
      - name: Install Dependencies if no cache hit
        if: steps.cache-hit.outputs.cache-hit != 'true'
        run: composer install --no-interaction --no-progress --optimize-autoloader

      # Remove composer files to avoid caching them
      - name: Remove composer files from caching
        if: steps.cache-hit.outputs.cache-hit != 'true'
        run: rm composer.json

      # Cache dependencies if they were not previously cached
      - name: Cache Composer dependencies
        if: steps.cache-hit.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer

  # Job to run tests
  run-tests:
    name: Test 
    needs: [setup]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false  # Allow tests to continue even if some fail
      matrix:
        include:
          # - test-type: integration
          - test-type: functional
          - test-type: acceptance

    steps:
      # Check out repository for tests
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      # Set up PHP and Composer environment
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          tools: composer:${{ env.COMPOSER_VERSION }}, wp

      # Restore cached dependencies
      - name: Restore Cached dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-composer

      # Configure GitHub OAuth token for Composer if cache is missing
      - name: Configure Composer GitHub OAuth
        run: ${{ env.GITHUB_OAUTH_COMMAND }}

      # Install dependencies if cache is missing
      - name: Install Dependencies if no cache hit
        run: composer install --no-interaction --no-progress --optimize-autoloader

      # Create .env file for testing
      - name: Create .env file for tests
        run: cp ./tests/.env.ci ./tests/.env

           # Start MySQL and setup databases
      - name: Start and Setup MySQL
        run: |
          # Start MySQL service
          sudo systemctl start mysql.service
          # Verify MySQL service status
          sudo systemctl status mysql.service
          # Set up test databases
          mysql -u root -proot -h localhost -e "CREATE DATABASE IF NOT EXISTS seed;"
          mysql -u root -proot -h localhost -e "CREATE DATABASE IF NOT EXISTS test;"
          cp -v ./wp-content/mysql.sql ./tests/_support/Data/db/dump.sql
          # Load initial database data
          mysql -u root -proot -h localhost seed < ./tests/_support/Data/db/dump.sql

      # Restart Chromedriver for acceptance tests
      - name: Restart Chromedriver
        if: ${{ matrix.test-type == 'acceptance' }}
        run: |
          ./vendor/bin/codecept chromedriver:update
          ./vendor/bin/codecept dev:restart

      # Configure WordPress URLs for tests
      - name: Checkout wp-config.php & add defines
        run: |
          wp config set WP_HOME 'http://127.0.0.1' --type=constant
          wp config set WP_SITEURL 'http://127.0.0.1' --type=constant

      # Start NGIX server for functional and acceptance tests
      - name: Start NGIX Server
        if: ${{ matrix.test-type != 'integration' && matrix.test-type != 'unit' }}
        uses: ./.github/actions/setup-nginx
        with:
          php-version: ${{ env.PHP_VERSION }}

      # Run the tests based on matrix test-type
      - name: Run ${{ matrix.test-type }} tests
        run: ./vendor/bin/codecept run ${{ matrix.test-type }} -d -f --no-interaction --skip-group=skipCI --html

      # Upload artifacts if any tests fail
      - name: Upload Artifacts on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.test-type }}-test-artifacts-${{ github.sha }}
          path: |
            tests/_output/*.html
            tests/_output/*.png
            wp-content/debug.log
            /var/log/php_errors.log
